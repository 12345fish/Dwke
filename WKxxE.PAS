unit WKE;
{**************************************************************************}
{                                                                          }
{    This C DLL header file first (automatic) conversion generated by:     }
{    HeadConv 4.0 (c) 2000 by Bob Swart (aka Dr.Bob - www.drbob42.com)     }
{      Final Delphi-Jedi (Darth) command-line units edition                }
{                                                                          }
{    Generated Date: 2015/3/25 ÐÇÆÚÈý                                            }
{    Generated Time: 16:13:07                                              }
{                                                                          }
{**************************************************************************}

interface
uses
{$IFDEF WIN32}
  Windows;
{$ELSE}
  Wintypes, WinProcs;
{$ENDIF}


{=> v:\tmp\wke-master\wke-master\demo\libwke\WKE.H <=}

{+// }
{-* }
{-* BlzFans@hotmail.com }
{-* http: }
{-* http: }
{-* licence LGPL }
{-* }
{= }

{$IFNDEF WKE_H}
{$DEFINE WKE_H}


{$IFDEF BUILDING_wke}
{ # define WKE_API __declspec(dllexport) }
{$ELSE}
{ # define WKE_API __declspec(dllimport) }
{$ENDIF}

type
  utf8 = Char;

type
  wkeRect = record
    x: Integer;
    y: Integer;
    w: Integer;
    h: Integer;
  end {wkeRect};

type
  wkeMouseFlags = (
    WKE_LBUTTON {= 0x01}, 
    WKE_RBUTTON {= 0x02}, 
    WKE_SHIFT {= 0x04}, 
    WKE_CONTROL {= 0x08}, 
    WKE_MBUTTON {= 0x10} );

type
  wkeKeyFlags = (
    WKE_EXTENDED {= 0x0100}, 
    WKE_REPEAT {= 0x4000} );

type
  wkeMouseMsg = (
    WKE_MSG_MOUSEMOVE {= 0x0200}, 
    WKE_MSG_LBUTTONDOWN {= 0x0201}, 
    WKE_MSG_LBUTTONUP {= 0x0202}, 
    WKE_MSG_LBUTTONDBLCLK {= 0x0203}, 
    WKE_MSG_RBUTTONDOWN {= 0x0204}, 
    WKE_MSG_RBUTTONUP {= 0x0205}, 
    WKE_MSG_RBUTTONDBLCLK {= 0x0206}, 
    WKE_MSG_MBUTTONDOWN {= 0x0207}, 
    WKE_MSG_MBUTTONU, 
    ;, 
    typedef void* jsExecState;, 
    typedef __int64 jsValue;, 
    typedef void* wkeString;, 
    typedef void (*ON_TITLE_CHANGED) (const struct _wkeClientHandler* clientHandler, 
    const wkeString title);, 
    typedef void (*ON_URL_CHANGED) (const struct _wkeClientHandler* clientHandler, 
    const wkeString url);, 
    typedef struct _wkeClientHandler {, 
    ON_TITLE_CHANGED onTitleChanged;, 
    ON_URL_CHANGED onURLChanged; );

{+// }
{-*c++ interface }
{-*----------------------------------------------------------------------------------------------------------- }
{-* }
{= }

{$IFDEF __cplusplus}

var
  destroy: function cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  name: var function: VIRTUAL CONST CHAR cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  setName: function(const name: PChar) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  transparent: function: VIRTUAL cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  setTransparent: function(transparent: Bool) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  loadURL: function(const url: PUTF8) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  loadURL: function(const url: PWCHAR_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  loadHTML: function(const html: PUTF8) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  loadHTML: function(const html: PWCHAR_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  loadFile: function(const filename: PUTF8) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  loadFile: function(const filename: PWCHAR_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  isLoaded: function: VIRTUAL cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
{=document load sucessed }
var
  isLoadFailed: function: VIRTUAL cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
{=document load failed }
var
  isLoadComplete: function: VIRTUAL cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
{=document load complete }
var
  isDocumentReady: function: VIRTUAL cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
{=document ready }
var
  stopLoading: function cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  reload: function cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  title: var function: VIRTUAL CONST UTF8 cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  titleW: var function: VIRTUAL CONST WCHAR_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  resize: function(w: Integer; 
                   h: Integer) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  width: function: VIRTUAL cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
{=viewport width }
var
  height: function: VIRTUAL cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
{=viewport height }

var
  contentsWidth: function: VIRTUAL cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
{=contents width }
var
  contentsHeight: function: VIRTUAL cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
{=contents height }

var
  setDirty: function(dirty: Bool) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  isDirty: function: VIRTUAL cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  addDirtyArea: function(x: Integer; 
                         y: Integer; 
                         w: Integer; 
                         h: Integer) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  layoutIfNeeded: function cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  paint: function(bits: Pointer; 
                  pitch: Integer) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  canGoBack: function: VIRTUAL cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  goBack: function: VIRTUAL cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  canGoForward: function: VIRTUAL cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  goForward: function: VIRTUAL cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  selectAll: function cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  copy: function cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  cut: function cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  paste: function cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  delete_: function cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  setCookieEnabled: function(enable: Bool) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  cookieEnabled: function: VIRTUAL cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  setMediaVolume: function(volume: Single) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  mediaVolume: function: VIRTUAL cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  mouseEvent: function(message: Word; 
                       x: Integer; 
                       y: Integer; 
                       flags: Word): VIRTUAL cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  contextMenuEvent: function(x: Integer; 
                             y: Integer; 
                             flags: Word): VIRTUAL cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  mouseWheel: function(x: Integer; 
                       y: Integer; 
                       delta: Integer; 
                       flags: Word): VIRTUAL cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  keyUp: function(virtualKeyCode: Word; 
                  flags: Word; 
                  systemKey: Bool): VIRTUAL cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  keyDown: function(virtualKeyCode: Word; 
                    flags: Word; 
                    systemKey: Bool): VIRTUAL cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  keyPress: function(virtualKeyCode: Word; 
                     flags: Word; 
                     systemKey: Bool): VIRTUAL cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  focus: function cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  unfocus: function cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  getCaret: function: VIRTUAL cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  runJS: function(const script: PUTF8): VIRTUAL cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  runJS: function(const script: PWCHAR_T): VIRTUAL cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  globalExec: function: VIRTUAL cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  sleep: function cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  awaken: function cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  isAwake: function: VIRTUAL cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  setZoomFactor: function(factor: Single) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  zoomFactor: function: VIRTUAL cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  setEditable: function(editable: Bool) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  setClientHandler: function(const handler: PWKECLIENTHANDLER) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  getClientHandler: var function: VIRTUAL CONST WKECLIENTHANDLER cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

type
  wkeWebView = PWKE::IWEBVIEW;

{$ELSE}

type
  wkeWebView = Pointer;

{$IFNDEF HAVE_WCHAR_T}
type
  wchar_t = Word;
{$ENDIF}

{$IFNDEF HAVE_BOOL}
type
  bool = Byte;
const
  true = 1;
const
  false = 0;
{$ENDIF}

{$ENDIF /*__cplusplus*/}

{+// }
{-*c interface }
{-*---------------------------------------------------------------------------------------------------------- }
{-* }
{= }

{$IFDEF __cplusplus}
{$ENDIF}

var
  wkeInit: function cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  wkeShutdown: function cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  wkeUpdate: function cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  wkeVersion: function: WKE_API UNSIGNED cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  wkeVersionString: var function: WKE_API CONST UTF8 cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

type
  = VOID* (*FILE_OPEN) (CONST CHAR* PATH);
type
  = VOID (*FILE_CLOSE) (VOID* HANDLE);
type
  = SIZE_T (*FILE_SIZE) (VOID* HANDLE);
type
  = INT (*FILE_READ) (VOID* HANDLE, VOID* BUFFER, SIZE_T SIZE);
type
  = INT (*FILE_SEEK) (VOID* HANDLE, INT OFFSET, INT ORIGIN);

var
  wkeSetFileSystem: function(pfn_open: FILE_OPEN; 
                             pfn_close: FILE_CLOSE; 
                             pfn_size: FILE_SIZE; 
                             pfn_read: FILE_READ; 
                             pfn_seek: FILE_SEEK) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 


var
  wkeCreateWebView: function: WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  wkeGetWebView: function(const name: PChar): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  wkeDestroyWebView: function(webView: WKEWEBVIEW) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  wkeWebViewName: function(webView: var WKEWEBVIEW): WKE_API CONST CHAR cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  wkeSetWebViewName: function(webView: WKEWEBVIEW; 
                              const name: PChar) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  wkeIsTransparent: function(webView: WKEWEBVIEW): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  wkeSetTransparent: function(webView: WKEWEBVIEW; 
                              transparent: Bool) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  wkeLoadURL: function(webView: WKEWEBVIEW; 
                       const url: PUTF8) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  wkeLoadURLW: function(webView: WKEWEBVIEW; 
                        const url: PWCHAR_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  wkeLoadHTML: function(webView: WKEWEBVIEW; 
                        const html: PUTF8) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  wkeLoadHTMLW: function(webView: WKEWEBVIEW; 
                         const html: PWCHAR_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  wkeLoadFile: function(webView: WKEWEBVIEW; 
                        const filename: PUTF8) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  wkeLoadFileW: function(webView: WKEWEBVIEW; 
                         const filename: PWCHAR_T) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  wkeIsLoaded: function(webView: WKEWEBVIEW): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  wkeIsLoadFailed: function(webView: WKEWEBVIEW): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  wkeIsLoadComplete: function(webView: WKEWEBVIEW): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  wkeIsDocumentReady: function(webView: WKEWEBVIEW): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  wkeIsLoading: function(webView: WKEWEBVIEW): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  wkeStopLoading: function(webView: WKEWEBVIEW) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  wkeReload: function(webView: WKEWEBVIEW) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  wkeTitle: function(webView: var WKEWEBVIEW): WKE_API CONST UTF8 cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  wkeTitleW: function(webView: var WKEWEBVIEW): WKE_API CONST WCHAR_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  wkeResize: function(webView: WKEWEBVIEW; 
                      w: Integer; 
                      h: Integer) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  wkeWidth: function(webView: WKEWEBVIEW): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  wkeHeight: function(webView: WKEWEBVIEW): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  wkeContentsWidth: function(webView: WKEWEBVIEW): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  wkeContentsHeight: function(webView: WKEWEBVIEW): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  wkeSetDirty: function(webView: WKEWEBVIEW; 
                        dirty: Bool) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  wkeIsDirty: function(webView: WKEWEBVIEW): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  wkeAddDirtyArea: function(webView: WKEWEBVIEW; 
                            x: Integer; 
                            y: Integer; 
                            w: Integer; 
                            h: Integer) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  wkeLayoutIfNeeded: function(webView: WKEWEBVIEW) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  wkePaint: function(webView: WKEWEBVIEW; 
                     bits: Pointer; 
                     pitch: Integer) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  wkeCanGoBack: function(webView: WKEWEBVIEW): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  wkeGoBack: function(webView: WKEWEBVIEW): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  wkeCanGoForward: function(webView: WKEWEBVIEW): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  wkeGoForward: function(webView: WKEWEBVIEW): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  wkeSelectAll: function(webView: WKEWEBVIEW) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  wkeCopy: function(webView: WKEWEBVIEW) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  wkeCut: function(webView: WKEWEBVIEW) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  wkePaste: function(webView: WKEWEBVIEW) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  wkeDelete: function(webView: WKEWEBVIEW) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  wkeSetCookieEnabled: function(webView: WKEWEBVIEW; 
                                enable: Bool) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  wkeCookieEnabled: function(webView: WKEWEBVIEW): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  wkeSetMediaVolume: function(webView: WKEWEBVIEW; 
                              volume: Single) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  wkeMediaVolume: function(webView: WKEWEBVIEW): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  wkeMouseEvent: function(webView: WKEWEBVIEW; 
                          message: Word; 
                          x: Integer; 
                          y: Integer; 
                          flags: Word): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  wkeContextMenuEvent: function(webView: WKEWEBVIEW; 
                                x: Integer; 
                                y: Integer; 
                                flags: Word): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  wkeMouseWheel: function(webView: WKEWEBVIEW; 
                          x: Integer; 
                          y: Integer; 
                          delta: Integer; 
                          flags: Word): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  wkeKeyUp: function(webView: WKEWEBVIEW; 
                     virtualKeyCode: Word; 
                     flags: Word; 
                     systemKey: Bool): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  wkeKeyDown: function(webView: WKEWEBVIEW; 
                       virtualKeyCode: Word; 
                       flags: Word; 
                       systemKey: Bool): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  wkeKeyPress: function(webView: WKEWEBVIEW; 
                        charCode: Word; 
                        flags: Word; 
                        systemKey: Bool): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  wkeFocus: function(webView: WKEWEBVIEW) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  wkeUnfocus: function(webView: WKEWEBVIEW) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  wkeGetCaret: function(webView: WKEWEBVIEW): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  wkeRunJS: function(webView: WKEWEBVIEW; 
                     const script: PUTF8): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  wkeRunJSW: function(webView: WKEWEBVIEW; 
                      const script: PWCHAR_T): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  wkeGlobalExec: function(webView: WKEWEBVIEW): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  wkeSleep: function(webView: WKEWEBVIEW) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  wkeAwaken: function(webView: WKEWEBVIEW) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  wkeIsAwake: function(webView: WKEWEBVIEW): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  wkeSetZoomFactor: function(webView: WKEWEBVIEW; 
                             factor: Single) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  wkeZoomFactor: function(webView: WKEWEBVIEW): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  wkeSetEditable: function(webView: WKEWEBVIEW; 
                           editable: Bool) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  wkeSetClientHandler: function(webView: WKEWEBVIEW; 
                                const handler: PWKECLIENTHANDLER) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  wkeGetClientHandler: function(webView: var WKEWEBVIEW): WKE_API CONST WKECLIENTHANDLER cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  wkeToString: function(const string: WKESTRING): PWKE_API CONST UTF8 cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  wkeToStringW: function(const string: WKESTRING): PWKE_API CONST WCHAR_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//**JavaScript Bind***/ }
const
  JS_CALL = __fastcall;
type
  = JSVALUE (JS_CALL*JSNATIVEFUNCTION) (JSEXECSTATE ES);

type
  NewExit = (
    JSTYPE_NUMBER, 
    JSTYPE_STRING, 
    JSTYPE_BOOLEAN, 
    JSTYPE_OBJECT, 
    JSTYPE_FUNCTION, 
    JSTYPE_UNDEFINED );

var
  jsBindFunction: function(const name: PChar; 
                           fn: JSNATIVEFUNCTION; 
                           argCount: Word) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  jsBindGetter: function(const name: PChar; 
                         fn: JSNATIVEFUNCTION) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
{=get property }
var
  jsBindSetter: function(const name: PChar; 
                         fn: JSNATIVEFUNCTION) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
{=set property }

var
  jsArgCount: function(es: JSEXECSTATE): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  jsArgType: function(es: JSEXECSTATE; 
                      argIdx: Integer): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  jsArg: function(es: JSEXECSTATE; 
                  argIdx: Integer): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  jsTypeOf: function(v: JSVALUE): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  jsIsNumber: function(v: JSVALUE): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  jsIsString: function(v: JSVALUE): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  jsIsBoolean: function(v: JSVALUE): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  jsIsObject: function(v: JSVALUE): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  jsIsFunction: function(v: JSVALUE): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  jsIsUndefined: function(v: JSVALUE): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  jsIsNull: function(v: JSVALUE): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  jsIsArray: function(v: JSVALUE): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  jsIsTrue: function(v: JSVALUE): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  jsIsFalse: function(v: JSVALUE): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  jsToInt: function(es: JSEXECSTATE; 
                    v: JSVALUE): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  jsToFloat: function(es: JSEXECSTATE; 
                      v: JSVALUE): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  jsToDouble: function(es: JSEXECSTATE; 
                       v: JSVALUE): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  jsToBoolean: function(es: JSEXECSTATE; 
                        v: JSVALUE): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  jsToString: function(es: JSEXECSTATE; 
                       v: var JSVALUE): WKE_API CONST UTF8 cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  jsToStringW: function(es: JSEXECSTATE; 
                        v: var JSVALUE): WKE_API CONST WCHAR_T cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  jsInt: function(n: Integer): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  jsFloat: function(f: Single): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  jsDouble: function(d: Double): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  jsBoolean: function(b: Bool): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  jsUndefined: function: WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  jsNull: function: WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  jsTrue: function: WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  jsFalse: function: WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  jsString: function(es: JSEXECSTATE; 
                     const str: PUTF8): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  jsStringW: function(es: JSEXECSTATE; 
                      const str: PWCHAR_T): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  jsObject: function(es: JSEXECSTATE): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  jsArray: function(es: JSEXECSTATE): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  jsFunction: function(es: JSEXECSTATE; 
                       fn: JSNATIVEFUNCTION; 
                       argCount: Word): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{///return the window object }
var
  jsGlobalObject: function(es: JSEXECSTATE): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  jsEval: function(es: JSEXECSTATE; 
                   const str: PUTF8): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  jsEvalW: function(es: JSEXECSTATE; 
                    const str: PWCHAR_T): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  jsCall: function(es: JSEXECSTATE; 
                   func: JSVALUE; 
                   thisObject: JSVALUE; 
                   var args: JSVALUE; 
                   argCount: Integer): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  jsCallGlobal: function(es: JSEXECSTATE; 
                         func: JSVALUE; 
                         var args: JSVALUE; 
                         argCount: Integer): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  jsGet: function(es: JSEXECSTATE; 
                  object: JSVALUE; 
                  const prop: PChar): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  jsSet: function(es: JSEXECSTATE; 
                  object: JSVALUE; 
                  const prop: PChar; 
                  v: JSVALUE) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  jsGetGlobal: function(es: JSEXECSTATE; 
                        const prop: PChar): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  jsSetGlobal: function(es: JSEXECSTATE; 
                        const prop: PChar; 
                        v: JSVALUE) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  jsGetAt: function(es: JSEXECSTATE; 
                    object: JSVALUE; 
                    index: Integer): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  jsSetAt: function(es: JSEXECSTATE; 
                    object: JSVALUE; 
                    index: Integer; 
                    v: JSVALUE) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  jsGetLength: function(es: JSEXECSTATE; 
                        object: JSVALUE): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  jsSetLength: function(es: JSEXECSTATE; 
                        object: JSVALUE; 
                        length: Integer) cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  jsGetWebView: function(es: JSEXECSTATE): WKE_API cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  jsGC: function cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{$IFDEF __cplusplus}
{$ENDIF}


{$ENDIF}

var
  DLLLoaded: Boolean { is DLL (dynamically) loaded already? }
    {$IFDEF WIN32} = False; {$ENDIF}

implementation

var
  SaveExit: pointer;
  DLLHandle: THandle;
{$IFNDEF MSDOS}
  ErrorMode: Integer;
{$ENDIF}

  procedure NewExit; far;
  begin
    ExitProc := SaveExit;
    FreeLibrary(DLLHandle)
  end {NewExit};

procedure LoadDLL;
begin
  if DLLLoaded then Exit;
{$IFNDEF MSDOS}
  ErrorMode := SetErrorMode($8000{SEM_NoOpenFileErrorBox});
{$ENDIF}
  DLLHandle := LoadLibrary('WKE.DLL');
  if DLLHandle >= 32 then
  begin
    DLLLoaded := True;
    SaveExit := ExitProc;
    ExitProc := @NewExit;
    @destroy := GetProcAddress(DLLHandle,'destroy');
  {$IFDEF WIN32}
    Assert(@destroy <> nil);
  {$ENDIF}
    @name := GetProcAddress(DLLHandle,'name');
  {$IFDEF WIN32}
    Assert(@name <> nil);
  {$ENDIF}
    @setName := GetProcAddress(DLLHandle,'setName');
  {$IFDEF WIN32}
    Assert(@setName <> nil);
  {$ENDIF}
    @transparent := GetProcAddress(DLLHandle,'transparent');
  {$IFDEF WIN32}
    Assert(@transparent <> nil);
  {$ENDIF}
    @setTransparent := GetProcAddress(DLLHandle,'setTransparent');
  {$IFDEF WIN32}
    Assert(@setTransparent <> nil);
  {$ENDIF}
    @loadURL := GetProcAddress(DLLHandle,'loadURL');
  {$IFDEF WIN32}
    Assert(@loadURL <> nil);
  {$ENDIF}
    @loadURL := GetProcAddress(DLLHandle,'loadURL');
  {$IFDEF WIN32}
    Assert(@loadURL <> nil);
  {$ENDIF}
    @loadHTML := GetProcAddress(DLLHandle,'loadHTML');
  {$IFDEF WIN32}
    Assert(@loadHTML <> nil);
  {$ENDIF}
    @loadHTML := GetProcAddress(DLLHandle,'loadHTML');
  {$IFDEF WIN32}
    Assert(@loadHTML <> nil);
  {$ENDIF}
    @loadFile := GetProcAddress(DLLHandle,'loadFile');
  {$IFDEF WIN32}
    Assert(@loadFile <> nil);
  {$ENDIF}
    @loadFile := GetProcAddress(DLLHandle,'loadFile');
  {$IFDEF WIN32}
    Assert(@loadFile <> nil);
  {$ENDIF}
    @isLoaded := GetProcAddress(DLLHandle,'isLoaded');
  {$IFDEF WIN32}
    Assert(@isLoaded <> nil);
  {$ENDIF}
    @isLoadFailed := GetProcAddress(DLLHandle,'isLoadFailed');
  {$IFDEF WIN32}
    Assert(@isLoadFailed <> nil);
  {$ENDIF}
    @isLoadComplete := GetProcAddress(DLLHandle,'isLoadComplete');
  {$IFDEF WIN32}
    Assert(@isLoadComplete <> nil);
  {$ENDIF}
    @isDocumentReady := GetProcAddress(DLLHandle,'isDocumentReady');
  {$IFDEF WIN32}
    Assert(@isDocumentReady <> nil);
  {$ENDIF}
    @stopLoading := GetProcAddress(DLLHandle,'stopLoading');
  {$IFDEF WIN32}
    Assert(@stopLoading <> nil);
  {$ENDIF}
    @reload := GetProcAddress(DLLHandle,'reload');
  {$IFDEF WIN32}
    Assert(@reload <> nil);
  {$ENDIF}
    @title := GetProcAddress(DLLHandle,'title');
  {$IFDEF WIN32}
    Assert(@title <> nil);
  {$ENDIF}
    @titleW := GetProcAddress(DLLHandle,'titleW');
  {$IFDEF WIN32}
    Assert(@titleW <> nil);
  {$ENDIF}
    @resize := GetProcAddress(DLLHandle,'resize');
  {$IFDEF WIN32}
    Assert(@resize <> nil);
  {$ENDIF}
    @width := GetProcAddress(DLLHandle,'width');
  {$IFDEF WIN32}
    Assert(@width <> nil);
  {$ENDIF}
    @height := GetProcAddress(DLLHandle,'height');
  {$IFDEF WIN32}
    Assert(@height <> nil);
  {$ENDIF}
    @contentsWidth := GetProcAddress(DLLHandle,'contentsWidth');
  {$IFDEF WIN32}
    Assert(@contentsWidth <> nil);
  {$ENDIF}
    @contentsHeight := GetProcAddress(DLLHandle,'contentsHeight');
  {$IFDEF WIN32}
    Assert(@contentsHeight <> nil);
  {$ENDIF}
    @setDirty := GetProcAddress(DLLHandle,'setDirty');
  {$IFDEF WIN32}
    Assert(@setDirty <> nil);
  {$ENDIF}
    @isDirty := GetProcAddress(DLLHandle,'isDirty');
  {$IFDEF WIN32}
    Assert(@isDirty <> nil);
  {$ENDIF}
    @addDirtyArea := GetProcAddress(DLLHandle,'addDirtyArea');
  {$IFDEF WIN32}
    Assert(@addDirtyArea <> nil);
  {$ENDIF}
    @layoutIfNeeded := GetProcAddress(DLLHandle,'layoutIfNeeded');
  {$IFDEF WIN32}
    Assert(@layoutIfNeeded <> nil);
  {$ENDIF}
    @paint := GetProcAddress(DLLHandle,'paint');
  {$IFDEF WIN32}
    Assert(@paint <> nil);
  {$ENDIF}
    @canGoBack := GetProcAddress(DLLHandle,'canGoBack');
  {$IFDEF WIN32}
    Assert(@canGoBack <> nil);
  {$ENDIF}
    @goBack := GetProcAddress(DLLHandle,'goBack');
  {$IFDEF WIN32}
    Assert(@goBack <> nil);
  {$ENDIF}
    @canGoForward := GetProcAddress(DLLHandle,'canGoForward');
  {$IFDEF WIN32}
    Assert(@canGoForward <> nil);
  {$ENDIF}
    @goForward := GetProcAddress(DLLHandle,'goForward');
  {$IFDEF WIN32}
    Assert(@goForward <> nil);
  {$ENDIF}
    @selectAll := GetProcAddress(DLLHandle,'selectAll');
  {$IFDEF WIN32}
    Assert(@selectAll <> nil);
  {$ENDIF}
    @copy := GetProcAddress(DLLHandle,'copy');
  {$IFDEF WIN32}
    Assert(@copy <> nil);
  {$ENDIF}
    @cut := GetProcAddress(DLLHandle,'cut');
  {$IFDEF WIN32}
    Assert(@cut <> nil);
  {$ENDIF}
    @paste := GetProcAddress(DLLHandle,'paste');
  {$IFDEF WIN32}
    Assert(@paste <> nil);
  {$ENDIF}
    @delete_ := GetProcAddress(DLLHandle,'delete_');
  {$IFDEF WIN32}
    Assert(@delete_ <> nil);
  {$ENDIF}
    @setCookieEnabled := GetProcAddress(DLLHandle,'setCookieEnabled');
  {$IFDEF WIN32}
    Assert(@setCookieEnabled <> nil);
  {$ENDIF}
    @cookieEnabled := GetProcAddress(DLLHandle,'cookieEnabled');
  {$IFDEF WIN32}
    Assert(@cookieEnabled <> nil);
  {$ENDIF}
    @setMediaVolume := GetProcAddress(DLLHandle,'setMediaVolume');
  {$IFDEF WIN32}
    Assert(@setMediaVolume <> nil);
  {$ENDIF}
    @mediaVolume := GetProcAddress(DLLHandle,'mediaVolume');
  {$IFDEF WIN32}
    Assert(@mediaVolume <> nil);
  {$ENDIF}
    @mouseEvent := GetProcAddress(DLLHandle,'mouseEvent');
  {$IFDEF WIN32}
    Assert(@mouseEvent <> nil);
  {$ENDIF}
    @contextMenuEvent := GetProcAddress(DLLHandle,'contextMenuEvent');
  {$IFDEF WIN32}
    Assert(@contextMenuEvent <> nil);
  {$ENDIF}
    @mouseWheel := GetProcAddress(DLLHandle,'mouseWheel');
  {$IFDEF WIN32}
    Assert(@mouseWheel <> nil);
  {$ENDIF}
    @keyUp := GetProcAddress(DLLHandle,'keyUp');
  {$IFDEF WIN32}
    Assert(@keyUp <> nil);
  {$ENDIF}
    @keyDown := GetProcAddress(DLLHandle,'keyDown');
  {$IFDEF WIN32}
    Assert(@keyDown <> nil);
  {$ENDIF}
    @keyPress := GetProcAddress(DLLHandle,'keyPress');
  {$IFDEF WIN32}
    Assert(@keyPress <> nil);
  {$ENDIF}
    @focus := GetProcAddress(DLLHandle,'focus');
  {$IFDEF WIN32}
    Assert(@focus <> nil);
  {$ENDIF}
    @unfocus := GetProcAddress(DLLHandle,'unfocus');
  {$IFDEF WIN32}
    Assert(@unfocus <> nil);
  {$ENDIF}
    @getCaret := GetProcAddress(DLLHandle,'getCaret');
  {$IFDEF WIN32}
    Assert(@getCaret <> nil);
  {$ENDIF}
    @runJS := GetProcAddress(DLLHandle,'runJS');
  {$IFDEF WIN32}
    Assert(@runJS <> nil);
  {$ENDIF}
    @runJS := GetProcAddress(DLLHandle,'runJS');
  {$IFDEF WIN32}
    Assert(@runJS <> nil);
  {$ENDIF}
    @globalExec := GetProcAddress(DLLHandle,'globalExec');
  {$IFDEF WIN32}
    Assert(@globalExec <> nil);
  {$ENDIF}
    @sleep := GetProcAddress(DLLHandle,'sleep');
  {$IFDEF WIN32}
    Assert(@sleep <> nil);
  {$ENDIF}
    @awaken := GetProcAddress(DLLHandle,'awaken');
  {$IFDEF WIN32}
    Assert(@awaken <> nil);
  {$ENDIF}
    @isAwake := GetProcAddress(DLLHandle,'isAwake');
  {$IFDEF WIN32}
    Assert(@isAwake <> nil);
  {$ENDIF}
    @setZoomFactor := GetProcAddress(DLLHandle,'setZoomFactor');
  {$IFDEF WIN32}
    Assert(@setZoomFactor <> nil);
  {$ENDIF}
    @zoomFactor := GetProcAddress(DLLHandle,'zoomFactor');
  {$IFDEF WIN32}
    Assert(@zoomFactor <> nil);
  {$ENDIF}
    @setEditable := GetProcAddress(DLLHandle,'setEditable');
  {$IFDEF WIN32}
    Assert(@setEditable <> nil);
  {$ENDIF}
    @setClientHandler := GetProcAddress(DLLHandle,'setClientHandler');
  {$IFDEF WIN32}
    Assert(@setClientHandler <> nil);
  {$ENDIF}
    @getClientHandler := GetProcAddress(DLLHandle,'getClientHandler');
  {$IFDEF WIN32}
    Assert(@getClientHandler <> nil);
  {$ENDIF}
    @wkeInit := GetProcAddress(DLLHandle,'wkeInit');
  {$IFDEF WIN32}
    Assert(@wkeInit <> nil);
  {$ENDIF}
    @wkeShutdown := GetProcAddress(DLLHandle,'wkeShutdown');
  {$IFDEF WIN32}
    Assert(@wkeShutdown <> nil);
  {$ENDIF}
    @wkeUpdate := GetProcAddress(DLLHandle,'wkeUpdate');
  {$IFDEF WIN32}
    Assert(@wkeUpdate <> nil);
  {$ENDIF}
    @wkeVersion := GetProcAddress(DLLHandle,'wkeVersion');
  {$IFDEF WIN32}
    Assert(@wkeVersion <> nil);
  {$ENDIF}
    @wkeVersionString := GetProcAddress(DLLHandle,'wkeVersionString');
  {$IFDEF WIN32}
    Assert(@wkeVersionString <> nil);
  {$ENDIF}
    @wkeSetFileSystem := GetProcAddress(DLLHandle,'wkeSetFileSystem');
  {$IFDEF WIN32}
    Assert(@wkeSetFileSystem <> nil);
  {$ENDIF}
    @wkeCreateWebView := GetProcAddress(DLLHandle,'wkeCreateWebView');
  {$IFDEF WIN32}
    Assert(@wkeCreateWebView <> nil);
  {$ENDIF}
    @wkeGetWebView := GetProcAddress(DLLHandle,'wkeGetWebView');
  {$IFDEF WIN32}
    Assert(@wkeGetWebView <> nil);
  {$ENDIF}
    @wkeDestroyWebView := GetProcAddress(DLLHandle,'wkeDestroyWebView');
  {$IFDEF WIN32}
    Assert(@wkeDestroyWebView <> nil);
  {$ENDIF}
    @wkeWebViewName := GetProcAddress(DLLHandle,'wkeWebViewName');
  {$IFDEF WIN32}
    Assert(@wkeWebViewName <> nil);
  {$ENDIF}
    @wkeSetWebViewName := GetProcAddress(DLLHandle,'wkeSetWebViewName');
  {$IFDEF WIN32}
    Assert(@wkeSetWebViewName <> nil);
  {$ENDIF}
    @wkeIsTransparent := GetProcAddress(DLLHandle,'wkeIsTransparent');
  {$IFDEF WIN32}
    Assert(@wkeIsTransparent <> nil);
  {$ENDIF}
    @wkeSetTransparent := GetProcAddress(DLLHandle,'wkeSetTransparent');
  {$IFDEF WIN32}
    Assert(@wkeSetTransparent <> nil);
  {$ENDIF}
    @wkeLoadURL := GetProcAddress(DLLHandle,'wkeLoadURL');
  {$IFDEF WIN32}
    Assert(@wkeLoadURL <> nil);
  {$ENDIF}
    @wkeLoadURLW := GetProcAddress(DLLHandle,'wkeLoadURLW');
  {$IFDEF WIN32}
    Assert(@wkeLoadURLW <> nil);
  {$ENDIF}
    @wkeLoadHTML := GetProcAddress(DLLHandle,'wkeLoadHTML');
  {$IFDEF WIN32}
    Assert(@wkeLoadHTML <> nil);
  {$ENDIF}
    @wkeLoadHTMLW := GetProcAddress(DLLHandle,'wkeLoadHTMLW');
  {$IFDEF WIN32}
    Assert(@wkeLoadHTMLW <> nil);
  {$ENDIF}
    @wkeLoadFile := GetProcAddress(DLLHandle,'wkeLoadFile');
  {$IFDEF WIN32}
    Assert(@wkeLoadFile <> nil);
  {$ENDIF}
    @wkeLoadFileW := GetProcAddress(DLLHandle,'wkeLoadFileW');
  {$IFDEF WIN32}
    Assert(@wkeLoadFileW <> nil);
  {$ENDIF}
    @wkeIsLoaded := GetProcAddress(DLLHandle,'wkeIsLoaded');
  {$IFDEF WIN32}
    Assert(@wkeIsLoaded <> nil);
  {$ENDIF}
    @wkeIsLoadFailed := GetProcAddress(DLLHandle,'wkeIsLoadFailed');
  {$IFDEF WIN32}
    Assert(@wkeIsLoadFailed <> nil);
  {$ENDIF}
    @wkeIsLoadComplete := GetProcAddress(DLLHandle,'wkeIsLoadComplete');
  {$IFDEF WIN32}
    Assert(@wkeIsLoadComplete <> nil);
  {$ENDIF}
    @wkeIsDocumentReady := GetProcAddress(DLLHandle,'wkeIsDocumentReady');
  {$IFDEF WIN32}
    Assert(@wkeIsDocumentReady <> nil);
  {$ENDIF}
    @wkeIsLoading := GetProcAddress(DLLHandle,'wkeIsLoading');
  {$IFDEF WIN32}
    Assert(@wkeIsLoading <> nil);
  {$ENDIF}
    @wkeStopLoading := GetProcAddress(DLLHandle,'wkeStopLoading');
  {$IFDEF WIN32}
    Assert(@wkeStopLoading <> nil);
  {$ENDIF}
    @wkeReload := GetProcAddress(DLLHandle,'wkeReload');
  {$IFDEF WIN32}
    Assert(@wkeReload <> nil);
  {$ENDIF}
    @wkeTitle := GetProcAddress(DLLHandle,'wkeTitle');
  {$IFDEF WIN32}
    Assert(@wkeTitle <> nil);
  {$ENDIF}
    @wkeTitleW := GetProcAddress(DLLHandle,'wkeTitleW');
  {$IFDEF WIN32}
    Assert(@wkeTitleW <> nil);
  {$ENDIF}
    @wkeResize := GetProcAddress(DLLHandle,'wkeResize');
  {$IFDEF WIN32}
    Assert(@wkeResize <> nil);
  {$ENDIF}
    @wkeWidth := GetProcAddress(DLLHandle,'wkeWidth');
  {$IFDEF WIN32}
    Assert(@wkeWidth <> nil);
  {$ENDIF}
    @wkeHeight := GetProcAddress(DLLHandle,'wkeHeight');
  {$IFDEF WIN32}
    Assert(@wkeHeight <> nil);
  {$ENDIF}
    @wkeContentsWidth := GetProcAddress(DLLHandle,'wkeContentsWidth');
  {$IFDEF WIN32}
    Assert(@wkeContentsWidth <> nil);
  {$ENDIF}
    @wkeContentsHeight := GetProcAddress(DLLHandle,'wkeContentsHeight');
  {$IFDEF WIN32}
    Assert(@wkeContentsHeight <> nil);
  {$ENDIF}
    @wkeSetDirty := GetProcAddress(DLLHandle,'wkeSetDirty');
  {$IFDEF WIN32}
    Assert(@wkeSetDirty <> nil);
  {$ENDIF}
    @wkeIsDirty := GetProcAddress(DLLHandle,'wkeIsDirty');
  {$IFDEF WIN32}
    Assert(@wkeIsDirty <> nil);
  {$ENDIF}
    @wkeAddDirtyArea := GetProcAddress(DLLHandle,'wkeAddDirtyArea');
  {$IFDEF WIN32}
    Assert(@wkeAddDirtyArea <> nil);
  {$ENDIF}
    @wkeLayoutIfNeeded := GetProcAddress(DLLHandle,'wkeLayoutIfNeeded');
  {$IFDEF WIN32}
    Assert(@wkeLayoutIfNeeded <> nil);
  {$ENDIF}
    @wkePaint := GetProcAddress(DLLHandle,'wkePaint');
  {$IFDEF WIN32}
    Assert(@wkePaint <> nil);
  {$ENDIF}
    @wkeCanGoBack := GetProcAddress(DLLHandle,'wkeCanGoBack');
  {$IFDEF WIN32}
    Assert(@wkeCanGoBack <> nil);
  {$ENDIF}
    @wkeGoBack := GetProcAddress(DLLHandle,'wkeGoBack');
  {$IFDEF WIN32}
    Assert(@wkeGoBack <> nil);
  {$ENDIF}
    @wkeCanGoForward := GetProcAddress(DLLHandle,'wkeCanGoForward');
  {$IFDEF WIN32}
    Assert(@wkeCanGoForward <> nil);
  {$ENDIF}
    @wkeGoForward := GetProcAddress(DLLHandle,'wkeGoForward');
  {$IFDEF WIN32}
    Assert(@wkeGoForward <> nil);
  {$ENDIF}
    @wkeSelectAll := GetProcAddress(DLLHandle,'wkeSelectAll');
  {$IFDEF WIN32}
    Assert(@wkeSelectAll <> nil);
  {$ENDIF}
    @wkeCopy := GetProcAddress(DLLHandle,'wkeCopy');
  {$IFDEF WIN32}
    Assert(@wkeCopy <> nil);
  {$ENDIF}
    @wkeCut := GetProcAddress(DLLHandle,'wkeCut');
  {$IFDEF WIN32}
    Assert(@wkeCut <> nil);
  {$ENDIF}
    @wkePaste := GetProcAddress(DLLHandle,'wkePaste');
  {$IFDEF WIN32}
    Assert(@wkePaste <> nil);
  {$ENDIF}
    @wkeDelete := GetProcAddress(DLLHandle,'wkeDelete');
  {$IFDEF WIN32}
    Assert(@wkeDelete <> nil);
  {$ENDIF}
    @wkeSetCookieEnabled := GetProcAddress(DLLHandle,'wkeSetCookieEnabled');
  {$IFDEF WIN32}
    Assert(@wkeSetCookieEnabled <> nil);
  {$ENDIF}
    @wkeCookieEnabled := GetProcAddress(DLLHandle,'wkeCookieEnabled');
  {$IFDEF WIN32}
    Assert(@wkeCookieEnabled <> nil);
  {$ENDIF}
    @wkeSetMediaVolume := GetProcAddress(DLLHandle,'wkeSetMediaVolume');
  {$IFDEF WIN32}
    Assert(@wkeSetMediaVolume <> nil);
  {$ENDIF}
    @wkeMediaVolume := GetProcAddress(DLLHandle,'wkeMediaVolume');
  {$IFDEF WIN32}
    Assert(@wkeMediaVolume <> nil);
  {$ENDIF}
    @wkeMouseEvent := GetProcAddress(DLLHandle,'wkeMouseEvent');
  {$IFDEF WIN32}
    Assert(@wkeMouseEvent <> nil);
  {$ENDIF}
    @wkeContextMenuEvent := GetProcAddress(DLLHandle,'wkeContextMenuEvent');
  {$IFDEF WIN32}
    Assert(@wkeContextMenuEvent <> nil);
  {$ENDIF}
    @wkeMouseWheel := GetProcAddress(DLLHandle,'wkeMouseWheel');
  {$IFDEF WIN32}
    Assert(@wkeMouseWheel <> nil);
  {$ENDIF}
    @wkeKeyUp := GetProcAddress(DLLHandle,'wkeKeyUp');
  {$IFDEF WIN32}
    Assert(@wkeKeyUp <> nil);
  {$ENDIF}
    @wkeKeyDown := GetProcAddress(DLLHandle,'wkeKeyDown');
  {$IFDEF WIN32}
    Assert(@wkeKeyDown <> nil);
  {$ENDIF}
    @wkeKeyPress := GetProcAddress(DLLHandle,'wkeKeyPress');
  {$IFDEF WIN32}
    Assert(@wkeKeyPress <> nil);
  {$ENDIF}
    @wkeFocus := GetProcAddress(DLLHandle,'wkeFocus');
  {$IFDEF WIN32}
    Assert(@wkeFocus <> nil);
  {$ENDIF}
    @wkeUnfocus := GetProcAddress(DLLHandle,'wkeUnfocus');
  {$IFDEF WIN32}
    Assert(@wkeUnfocus <> nil);
  {$ENDIF}
    @wkeGetCaret := GetProcAddress(DLLHandle,'wkeGetCaret');
  {$IFDEF WIN32}
    Assert(@wkeGetCaret <> nil);
  {$ENDIF}
    @wkeRunJS := GetProcAddress(DLLHandle,'wkeRunJS');
  {$IFDEF WIN32}
    Assert(@wkeRunJS <> nil);
  {$ENDIF}
    @wkeRunJSW := GetProcAddress(DLLHandle,'wkeRunJSW');
  {$IFDEF WIN32}
    Assert(@wkeRunJSW <> nil);
  {$ENDIF}
    @wkeGlobalExec := GetProcAddress(DLLHandle,'wkeGlobalExec');
  {$IFDEF WIN32}
    Assert(@wkeGlobalExec <> nil);
  {$ENDIF}
    @wkeSleep := GetProcAddress(DLLHandle,'wkeSleep');
  {$IFDEF WIN32}
    Assert(@wkeSleep <> nil);
  {$ENDIF}
    @wkeAwaken := GetProcAddress(DLLHandle,'wkeAwaken');
  {$IFDEF WIN32}
    Assert(@wkeAwaken <> nil);
  {$ENDIF}
    @wkeIsAwake := GetProcAddress(DLLHandle,'wkeIsAwake');
  {$IFDEF WIN32}
    Assert(@wkeIsAwake <> nil);
  {$ENDIF}
    @wkeSetZoomFactor := GetProcAddress(DLLHandle,'wkeSetZoomFactor');
  {$IFDEF WIN32}
    Assert(@wkeSetZoomFactor <> nil);
  {$ENDIF}
    @wkeZoomFactor := GetProcAddress(DLLHandle,'wkeZoomFactor');
  {$IFDEF WIN32}
    Assert(@wkeZoomFactor <> nil);
  {$ENDIF}
    @wkeSetEditable := GetProcAddress(DLLHandle,'wkeSetEditable');
  {$IFDEF WIN32}
    Assert(@wkeSetEditable <> nil);
  {$ENDIF}
    @wkeSetClientHandler := GetProcAddress(DLLHandle,'wkeSetClientHandler');
  {$IFDEF WIN32}
    Assert(@wkeSetClientHandler <> nil);
  {$ENDIF}
    @wkeGetClientHandler := GetProcAddress(DLLHandle,'wkeGetClientHandler');
  {$IFDEF WIN32}
    Assert(@wkeGetClientHandler <> nil);
  {$ENDIF}
    @wkeToString := GetProcAddress(DLLHandle,'wkeToString');
  {$IFDEF WIN32}
    Assert(@wkeToString <> nil);
  {$ENDIF}
    @wkeToStringW := GetProcAddress(DLLHandle,'wkeToStringW');
  {$IFDEF WIN32}
    Assert(@wkeToStringW <> nil);
  {$ENDIF}
    @jsBindFunction := GetProcAddress(DLLHandle,'jsBindFunction');
  {$IFDEF WIN32}
    Assert(@jsBindFunction <> nil);
  {$ENDIF}
    @jsBindGetter := GetProcAddress(DLLHandle,'jsBindGetter');
  {$IFDEF WIN32}
    Assert(@jsBindGetter <> nil);
  {$ENDIF}
    @jsBindSetter := GetProcAddress(DLLHandle,'jsBindSetter');
  {$IFDEF WIN32}
    Assert(@jsBindSetter <> nil);
  {$ENDIF}
    @jsArgCount := GetProcAddress(DLLHandle,'jsArgCount');
  {$IFDEF WIN32}
    Assert(@jsArgCount <> nil);
  {$ENDIF}
    @jsArgType := GetProcAddress(DLLHandle,'jsArgType');
  {$IFDEF WIN32}
    Assert(@jsArgType <> nil);
  {$ENDIF}
    @jsArg := GetProcAddress(DLLHandle,'jsArg');
  {$IFDEF WIN32}
    Assert(@jsArg <> nil);
  {$ENDIF}
    @jsTypeOf := GetProcAddress(DLLHandle,'jsTypeOf');
  {$IFDEF WIN32}
    Assert(@jsTypeOf <> nil);
  {$ENDIF}
    @jsIsNumber := GetProcAddress(DLLHandle,'jsIsNumber');
  {$IFDEF WIN32}
    Assert(@jsIsNumber <> nil);
  {$ENDIF}
    @jsIsString := GetProcAddress(DLLHandle,'jsIsString');
  {$IFDEF WIN32}
    Assert(@jsIsString <> nil);
  {$ENDIF}
    @jsIsBoolean := GetProcAddress(DLLHandle,'jsIsBoolean');
  {$IFDEF WIN32}
    Assert(@jsIsBoolean <> nil);
  {$ENDIF}
    @jsIsObject := GetProcAddress(DLLHandle,'jsIsObject');
  {$IFDEF WIN32}
    Assert(@jsIsObject <> nil);
  {$ENDIF}
    @jsIsFunction := GetProcAddress(DLLHandle,'jsIsFunction');
  {$IFDEF WIN32}
    Assert(@jsIsFunction <> nil);
  {$ENDIF}
    @jsIsUndefined := GetProcAddress(DLLHandle,'jsIsUndefined');
  {$IFDEF WIN32}
    Assert(@jsIsUndefined <> nil);
  {$ENDIF}
    @jsIsNull := GetProcAddress(DLLHandle,'jsIsNull');
  {$IFDEF WIN32}
    Assert(@jsIsNull <> nil);
  {$ENDIF}
    @jsIsArray := GetProcAddress(DLLHandle,'jsIsArray');
  {$IFDEF WIN32}
    Assert(@jsIsArray <> nil);
  {$ENDIF}
    @jsIsTrue := GetProcAddress(DLLHandle,'jsIsTrue');
  {$IFDEF WIN32}
    Assert(@jsIsTrue <> nil);
  {$ENDIF}
    @jsIsFalse := GetProcAddress(DLLHandle,'jsIsFalse');
  {$IFDEF WIN32}
    Assert(@jsIsFalse <> nil);
  {$ENDIF}
    @jsToInt := GetProcAddress(DLLHandle,'jsToInt');
  {$IFDEF WIN32}
    Assert(@jsToInt <> nil);
  {$ENDIF}
    @jsToFloat := GetProcAddress(DLLHandle,'jsToFloat');
  {$IFDEF WIN32}
    Assert(@jsToFloat <> nil);
  {$ENDIF}
    @jsToDouble := GetProcAddress(DLLHandle,'jsToDouble');
  {$IFDEF WIN32}
    Assert(@jsToDouble <> nil);
  {$ENDIF}
    @jsToBoolean := GetProcAddress(DLLHandle,'jsToBoolean');
  {$IFDEF WIN32}
    Assert(@jsToBoolean <> nil);
  {$ENDIF}
    @jsToString := GetProcAddress(DLLHandle,'jsToString');
  {$IFDEF WIN32}
    Assert(@jsToString <> nil);
  {$ENDIF}
    @jsToStringW := GetProcAddress(DLLHandle,'jsToStringW');
  {$IFDEF WIN32}
    Assert(@jsToStringW <> nil);
  {$ENDIF}
    @jsInt := GetProcAddress(DLLHandle,'jsInt');
  {$IFDEF WIN32}
    Assert(@jsInt <> nil);
  {$ENDIF}
    @jsFloat := GetProcAddress(DLLHandle,'jsFloat');
  {$IFDEF WIN32}
    Assert(@jsFloat <> nil);
  {$ENDIF}
    @jsDouble := GetProcAddress(DLLHandle,'jsDouble');
  {$IFDEF WIN32}
    Assert(@jsDouble <> nil);
  {$ENDIF}
    @jsBoolean := GetProcAddress(DLLHandle,'jsBoolean');
  {$IFDEF WIN32}
    Assert(@jsBoolean <> nil);
  {$ENDIF}
    @jsUndefined := GetProcAddress(DLLHandle,'jsUndefined');
  {$IFDEF WIN32}
    Assert(@jsUndefined <> nil);
  {$ENDIF}
    @jsNull := GetProcAddress(DLLHandle,'jsNull');
  {$IFDEF WIN32}
    Assert(@jsNull <> nil);
  {$ENDIF}
    @jsTrue := GetProcAddress(DLLHandle,'jsTrue');
  {$IFDEF WIN32}
    Assert(@jsTrue <> nil);
  {$ENDIF}
    @jsFalse := GetProcAddress(DLLHandle,'jsFalse');
  {$IFDEF WIN32}
    Assert(@jsFalse <> nil);
  {$ENDIF}
    @jsString := GetProcAddress(DLLHandle,'jsString');
  {$IFDEF WIN32}
    Assert(@jsString <> nil);
  {$ENDIF}
    @jsStringW := GetProcAddress(DLLHandle,'jsStringW');
  {$IFDEF WIN32}
    Assert(@jsStringW <> nil);
  {$ENDIF}
    @jsObject := GetProcAddress(DLLHandle,'jsObject');
  {$IFDEF WIN32}
    Assert(@jsObject <> nil);
  {$ENDIF}
    @jsArray := GetProcAddress(DLLHandle,'jsArray');
  {$IFDEF WIN32}
    Assert(@jsArray <> nil);
  {$ENDIF}
    @jsFunction := GetProcAddress(DLLHandle,'jsFunction');
  {$IFDEF WIN32}
    Assert(@jsFunction <> nil);
  {$ENDIF}
    @jsGlobalObject := GetProcAddress(DLLHandle,'jsGlobalObject');
  {$IFDEF WIN32}
    Assert(@jsGlobalObject <> nil);
  {$ENDIF}
    @jsEval := GetProcAddress(DLLHandle,'jsEval');
  {$IFDEF WIN32}
    Assert(@jsEval <> nil);
  {$ENDIF}
    @jsEvalW := GetProcAddress(DLLHandle,'jsEvalW');
  {$IFDEF WIN32}
    Assert(@jsEvalW <> nil);
  {$ENDIF}
    @jsCall := GetProcAddress(DLLHandle,'jsCall');
  {$IFDEF WIN32}
    Assert(@jsCall <> nil);
  {$ENDIF}
    @jsCallGlobal := GetProcAddress(DLLHandle,'jsCallGlobal');
  {$IFDEF WIN32}
    Assert(@jsCallGlobal <> nil);
  {$ENDIF}
    @jsGet := GetProcAddress(DLLHandle,'jsGet');
  {$IFDEF WIN32}
    Assert(@jsGet <> nil);
  {$ENDIF}
    @jsSet := GetProcAddress(DLLHandle,'jsSet');
  {$IFDEF WIN32}
    Assert(@jsSet <> nil);
  {$ENDIF}
    @jsGetGlobal := GetProcAddress(DLLHandle,'jsGetGlobal');
  {$IFDEF WIN32}
    Assert(@jsGetGlobal <> nil);
  {$ENDIF}
    @jsSetGlobal := GetProcAddress(DLLHandle,'jsSetGlobal');
  {$IFDEF WIN32}
    Assert(@jsSetGlobal <> nil);
  {$ENDIF}
    @jsGetAt := GetProcAddress(DLLHandle,'jsGetAt');
  {$IFDEF WIN32}
    Assert(@jsGetAt <> nil);
  {$ENDIF}
    @jsSetAt := GetProcAddress(DLLHandle,'jsSetAt');
  {$IFDEF WIN32}
    Assert(@jsSetAt <> nil);
  {$ENDIF}
    @jsGetLength := GetProcAddress(DLLHandle,'jsGetLength');
  {$IFDEF WIN32}
    Assert(@jsGetLength <> nil);
  {$ENDIF}
    @jsSetLength := GetProcAddress(DLLHandle,'jsSetLength');
  {$IFDEF WIN32}
    Assert(@jsSetLength <> nil);
  {$ENDIF}
    @jsGetWebView := GetProcAddress(DLLHandle,'jsGetWebView');
  {$IFDEF WIN32}
    Assert(@jsGetWebView <> nil);
  {$ENDIF}
    @jsGC := GetProcAddress(DLLHandle,'jsGC');
  {$IFDEF WIN32}
    Assert(@jsGC <> nil);
  {$ENDIF}
  end
  else
  begin
    DLLLoaded := False;
    { Error: WKE.DLL could not be loaded !! }
  end;
{$IFNDEF MSDOS}
  SetErrorMode(ErrorMode)
{$ENDIF}
end {LoadDLL};

begin
  LoadDLL;
end.
